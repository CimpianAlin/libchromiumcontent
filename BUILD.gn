import("//build/buildflag_header.gni")
# import("//build/config/chrome_build.gni")
import("//build/config/compiler/compiler.gni")
import("//build/config/features.gni")
import("//build/config/locales.gni")
import("//build/config/crypto.gni")
import("//build/config/sanitizers/sanitizers.gni")
import("//build/config/ui.gni")
# import("//build/config/win/console_app.gni")
# import("//build/config/win/manifest.gni")
import("//chrome/chrome_repack_locales.gni")
# import("//chrome/common/features.gni")
# import("//chrome/version.gni")
import("//ui/base/ui_features.gni")
# import("//v8/gni/v8.gni")

if (is_mac) {
  # import("//build/compiled_action.gni")
  # import("//build/config/mac/rules.gni")
  # import("//build/config/mac/symbols.gni")
  # import("//build/mac/tweak_info_plist.gni")
  # import("//build/util/branding.gni")
  # import("//build/util/version.gni")
  # import("//build_overrides/v8.gni")
  # import("//media/cdm/ppapi/cdm_paths.gni")
}

testonly = false
enable_basic_printing = true
enable_basic_print_dialog = true
enable_print_preview = false
toolkit_views = false
enable_extensions = true

# enable_webrtc = true
# enable_nacl = false
# proprietary_codecs = true
# enable_widevine = true
# mac_deployment_target_build_override = "10.8"
# enable_webrtc = true
# deps = [
#   "v8", "v8_snapshot", "v8_nosnapshot", "v8_external_snapshot", "v8_base", "v8_libbase", "v8_libplatform"
# ]

static_library("libchromiumcontent") {
  complete_static_lib = true

  # if (!is_win) {
  #   configs -= [ "//build/config/gcc:symbol_visibility_hidden" ]
  # }

  sources = [
    "chromiumcontent/empty.cc"
  ]

  deps = [
    ":chromiumcontent",
    "//chrome/test/chromedriver",
  ]

  if (is_linux) {
    deps += [
      ":chromiumviews",
      "//third_party/speech-dispatcher",
      # data_deps??
      "//third_party/mesa:osmesa",
    ]
  }

  if (is_win) {
    deps += [
      ":chromiumviews",
    ]
  }

  deps += [
    ":packed_extra_resources",
    "//chrome:packed_resources",
   # "//third_party/icu:icu_assets",
   # "//v8:v8_external_startup_data_assets",
  ]
}

repack("packed_extra_resources") {
  visibility = [ "./*" ]
  sources = [
    "$root_gen_dir/components/components_resources.pak",
    "$root_gen_dir/net/net_resources.pak",
    "$root_gen_dir/ui/resources/webui_resources.pak",
  ]
  deps = [
    "//components/resources",
    "//net:net_resources",
    "//ui/resources",
  ]

  # New paks should be added here by default.
  sources += [
    "$root_gen_dir/blink/devtools_resources.pak",
  ]
  deps += [
    "//content/browser/devtools:devtools_resources",
  ]

  sources += [
    "$root_gen_dir/blink/public/resources/blink_resources.pak",
    "$root_gen_dir/content/browser/tracing/tracing_resources.pak",
    "$root_gen_dir/content/content_resources.pak",
  ]
  deps += [
    "//content:resources",
    "//content/browser/tracing:resources",
    "//third_party/WebKit/public:resources",
  ]

  if (enable_extensions) {
    sources += [
      "$root_gen_dir/extensions/extensions_renderer_resources.pak",
      "$root_gen_dir/extensions/extensions_resources.pak",
    ]
    deps += [ "//extensions:extensions_resources" ]
  }

  output = "$root_out_dir/libchromiumcontent_resources.pak"
}

template("electron_repack_percent") {
  percent = invoker.percent

  repack_name = "${target_name}_repack"
  repack_output_file = "$root_gen_dir/repack/electron_${percent}_percent.pak"

  copy_name = target_name

  repack(repack_name) {
    visibility = [ ":$copy_name" ]

    # All sources should also have deps for completeness.
    sources = [
      # "$root_gen_dir/chrome/renderer_resources_${percent}_percent.pak",
      "$root_gen_dir/components/components_resources_${percent}_percent.pak",
      "$root_gen_dir/ui/resources/ui_resources_${percent}_percent.pak",
    ]

    deps = [
      # "//chrome/renderer:resources",
      "//components/resources",
      "//components/strings",
      "//net:net_resources",
      "//ui/resources",
    ]

    sources += [
      "$root_gen_dir/blink/public/resources/blink_image_resources_${percent}_percent.pak",
      "$root_gen_dir/content/app/resources/content_resources_${percent}_percent.pak",
    ]
    deps += [
      "//content/app/resources",
      "//third_party/WebKit/public:image_resources",
    ]
    if (use_ash) {
      sources +=
          [ "$root_gen_dir/ash/resources/ash_resources_${percent}_percent.pak" ]
      deps += [ "//ash/resources" ]
    }
    if (toolkit_views) {
      sources += [ "$root_gen_dir/ui/views/resources/views_resources_${percent}_percent.pak" ]
      deps += [ "//ui/views/resources" ]
    }
    if (enable_extensions) {
      sources += [ "$root_gen_dir/extensions/extensions_browser_resources_${percent}_percent.pak" ]
      deps += [ "//extensions:extensions_browser_resources" ]
    }
    # if (enable_app_list) {
    #   sources += [ "$root_gen_dir/ui/app_list/resources/app_list_resources_${percent}_percent.pak" ]
    #   deps += [ "//ui/app_list/resources" ]
    # }

    output = repack_output_file
  }

  copy(copy_name) {
    visibility = [ ":*" ]
    deps = [
      ":$repack_name",
    ]
    sources = [
      repack_output_file,
    ]
    outputs = [
      "$root_build_dir/electron_${percent}_percent.pak",
    ]
  }
}

electron_repack_percent("repack_electron_100_percent") {
  percent = "100"
}

if (enable_hidpi) {
  electron_repack_percent("repack_electron_200_percent") {
    percent = "200"
  }
}

source_set("chromiumcontent") {
  # if (!is_win) {
  #   configs -= [ "//build/config/gcc:symbol_visibility_hidden" ]
  # }

  deps = [
    "//chrome/common",
    ":extensions",
    ":autofill",
    ":importer",

    "//components/prefs",
    "//components/cdm/renderer",
    "//components/cookie_config",
    "//components/devtools_discovery",
    "//components/devtools_http_handler",
    "//components/security_state",
    "//content",
    "//content/public/app:both",
    # are these necessary?
    "//content/public/browser",
    "//content/public/common",
    "//content/public/common:feature_h264_with_openh264_ffmpeg",
    "//content/public/common:features",
    "//content/public/renderer",
    "//content/public/utility",
    "//content/public/child",

    #browser
    "//components/content_settings/content/common",
    "//components/content_settings/core/browser",
    "//components/content_settings/core/common",

    # pepper
    "//components/pdf/renderer",

    "//net:net_with_v8",
    "//ppapi/host",
    "//ppapi/proxy",
    "//ppapi/proxy:ipc",
    "//ppapi/shared_impl",
    "//content/shell:pak",

    # these were added from chrome
    "//third_party/WebKit/public:image_resources",
    "//third_party/WebKit/public:resources",
    "//third_party/cacheinvalidation",
    "//third_party/icu",
    "//third_party/leveldatabase",
    "//third_party/libaddressinput:util",
    "//third_party/re2",
    # end

    # "//third_party/webrtc/modules/desktop_capture",

    "//third_party/widevine/cdm:widevinecdm",
    "//third_party/widevine/cdm:widevinecdmadapter",

    "//components/printing/browser",
    "//components/printing/renderer",
    "//components/printing/common",
    "//printing"
  ]

  if (is_win) {
    deps += [
      "//pdf"
    ]
  }
}

source_set("importer") {
  # if (!is_win) {
  #   configs -= [ "//build/config/gcc:symbol_visibility_hidden" ]
  # }

  sources = [
    "//chrome/utility/importer/nss_decryptor.cc",
    "//chrome/utility/importer/nss_decryptor.h",
    "//chrome/utility/importer/nss_decryptor_mac.h",
    "//chrome/utility/importer/nss_decryptor_mac.mm",
    "//chrome/utility/importer/nss_decryptor_win.cc",
    "//chrome/utility/importer/nss_decryptor_win.h",
  ]

  deps = [
    "//components/history/core/browser",
  ]

  if (use_nss_certs) {
    sources += [
      "//chrome/utility/importer/nss_decryptor_system_nss.cc",
      "//chrome/utility/importer/nss_decryptor_system_nss.h",
    ]
    deps += [
      "//crypto",
      "//crypto:platform",
    ]
  }
}

source_set("autofill") {
  deps = [
    "//components/autofill/content/common",
    "//components/autofill/core/common",
    "//components/autofill/content/renderer",
    "//components/autofill/content/browser",
  ]
}

source_set("extensions") {
  # if (!is_win) {
  #   configs -= [ "//build/config/gcc:symbol_visibility_hidden" ]
  # }

  deps = [
    "//extensions/common",
    "//chrome/common/extensions/api",
    "//chrome/common/extensions/api:api_registration",
    "//chrome/common/extensions/api:extensions_features",
    "//extensions/utility",
    "//extensions/renderer",

    "//components/syncable_prefs",
    # from chrome browser
    "//crypto",
    "//device/bluetooth",
    "//device/hid",
    "//extensions:extensions_resources",
    "//extensions/browser",
    "//extensions/common/api",
    "//extensions/common/api:api_registration",
    "//extensions/strings",
    "//net",
    "//skia",
    "//sql",
    "//storage/browser",
    "//storage/common",
    "//third_party/WebKit/public:image_resources",
    "//third_party/WebKit/public:resources",
    "//third_party/cacheinvalidation",
    "//third_party/icu",
    "//third_party/leveldatabase",
    "//third_party/libaddressinput:util",
    "//third_party/re2",
    "//third_party/webrtc/modules/desktop_capture",
    "//ui/accessibility:ax_gen",
    "//ui/base",
    "//ui/base/ime",
    "//ui/gfx",
    "//ui/gfx/geometry",
    "//ui/native_theme",
    "//ui/resources",
    "//ui/shell_dialogs",
    "//ui/strings",
    "//url",

    # from chrome renderer
    "//media/cast:net",
    "//media/cast:receiver",
    "//media/cast:sender",
  ]

  sources = [
    "//extensions/shell/browser/shell_display_info_provider.cc",
  ]
}

source_set("chromiumviews") {
  # if (!is_win) {
  #   configs -= [ "//build/config/gcc:symbol_visibility_hidden" ]
  # }

  deps = [
    "//ui/content_accelerators",
    "//ui/display",
    # do we need this??
    "//ui/display/util",
    "//ui/views/controls/webview",
    "//ui/wm",
  ]

  # remove_deps = [
  #   "//ui/views/controls/webview:test_support"
  # ]
}

copy("tools") {
  sources = [ "//tools/json_schema_compiler" ]
  outputs = [ "$root_out_dir/tools/{{source_file_part}}" ]
}
