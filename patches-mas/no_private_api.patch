diff --git a/content/browser/accessibility/browser_accessibility_cocoa.mm b/content/browser/accessibility/browser_accessibility_cocoa.mm
index 947575e..c577069b 100644
--- a/content/browser/accessibility/browser_accessibility_cocoa.mm
+++ b/content/browser/accessibility/browser_accessibility_cocoa.mm
@@ -84,10 +84,12 @@ const int kAXResultsLimitNoLimit = -1;
 
 extern "C" {
 
+#ifndef MAS_BUILD
 // See http://openradar.appspot.com/9896491. This SPI has been tested on 10.5,
 // 10.6, and 10.7. It allows accessibility clients to observe events posted on
 // this object.
 void NSAccessibilityUnregisterUniqueIdForUIElement(id element);
+#endif
 
 // The following are private accessibility APIs required for cursor navigation
 // and text selection. VoiceOver started relying on them in Mac OS X 10.11.
@@ -490,7 +492,9 @@ bool InitializeAccessibilityTreeSearch(
 
 - (void)detach {
   if (browserAccessibility_) {
+#ifndef MAS_BUILD
     NSAccessibilityUnregisterUniqueIdForUIElement(self);
+#endif
     browserAccessibility_ = NULL;
   }
 }
diff --git a/content/common/sandbox_mac.mm b/content/common/sandbox_mac.mm
index ca915a7..b6b23a2 100644
--- a/content/common/sandbox_mac.mm
+++ b/content/common/sandbox_mac.mm
@@ -43,6 +43,7 @@ extern "C" {
 #include "ui/base/layout.h"
 #include "ui/gl/gl_surface.h"
 
+#ifndef MAS_BUILD
 extern "C" {
 void CGSSetDenyWindowServerConnections(bool);
 void CGSShutdownServerConnections();
@@ -56,6 +57,7 @@ int sandbox_apply(void* profile);
 void sandbox_free_params(void* params);
 void sandbox_free_profile(void* profile);
 };
+#endif
 
 namespace content {
 namespace {
@@ -156,15 +158,20 @@ bool SandboxCompiler::InsertStringParam(const std::string& key,
 void SandboxCompiler::FreeSandboxResources(void* profile,
                                            void* params,
                                            char* error) {
+#ifndef MAS_BUILD
   if (error)
     sandbox_free_error(error);
   if (params)
     sandbox_free_params(params);
   if (profile)
     sandbox_free_profile(profile);
+#endif
 }
 
 bool SandboxCompiler::CompileAndApplyProfile(std::string* error) {
+#ifdef MAS_BUILD
+  return false;
+#else
   char* error_internal = nullptr;
   void* profile = nullptr;
   void* params = nullptr;
@@ -205,6 +212,7 @@ bool SandboxCompiler::CompileAndApplyProfile(std::string* error) {
   int result = sandbox_apply(profile);
   FreeSandboxResources(profile, params, error_internal);
   return result == 0;
+#endif
 }
 
 // static
@@ -402,8 +410,10 @@ void Sandbox::SandboxWarmup(int sandbox_type) {
     // 10.8 and higher because doing it on earlier OSes causes layout tests to
     // fail <http://crbug.com/397642#c48>. This may cause two log messages to
     // be printed to the system logger on certain OS versions.
+#ifndef MAS_BUILD
     CGSSetDenyWindowServerConnections(true);
     CGSShutdownServerConnections();
+#endif
   }
 }
 
diff --git a/net/dns/dns_config_service_posix.cc b/net/dns/dns_config_service_posix.cc
index ab84b22..a502efc 100644
--- a/net/dns/dns_config_service_posix.cc
+++ b/net/dns/dns_config_service_posix.cc
@@ -200,6 +200,7 @@ class DnsConfigServicePosix::Watcher {
   ~Watcher() {}
 
   bool Watch() {
+#ifndef MAS_BUILD
     bool success = true;
     if (!config_watcher_.Watch(base::Bind(&Watcher::OnConfigChanged,
                                           base::Unretained(this)))) {
@@ -220,6 +221,7 @@ class DnsConfigServicePosix::Watcher {
                                 DNS_CONFIG_WATCH_MAX);
     }
 #endif
+#endif
     return success;
   }
 
diff --git a/ui/gfx/font_fallback_mac.mm b/ui/gfx/font_fallback_mac.mm
index aa66729..1ae4016 100644
--- a/ui/gfx/font_fallback_mac.mm
+++ b/ui/gfx/font_fallback_mac.mm
@@ -14,6 +14,7 @@
 #import "base/strings/sys_string_conversions.h"
 #include "ui/gfx/font.h"
 
+#ifndef MAS_BUILD
 // CTFontCopyDefaultCascadeListForLanguages() doesn't exist in the 10.6 SDK.
 // There is only the following. It doesn't exist in the public header files,
 // but is an exported symbol so should always link.
@@ -40,6 +41,7 @@ CFArrayRef CTFontCopyDefaultCascadeListForLanguagesWrapper(
 }
 
 }  // namespace
+#endif
 
 namespace gfx {
 
@@ -56,7 +58,11 @@ std::vector<Font> GetFallbackFonts(const Font& font) {
       stringArrayForKey:@"AppleLanguages"];
   CFArrayRef languages_cf = base::mac::NSToCFCast(languages);
   base::ScopedCFTypeRef<CFArrayRef> cascade_list(
+#ifndef MAS_BUILD
       CTFontCopyDefaultCascadeListForLanguagesWrapper(
+#else
+      CTFontCopyDefaultCascadeListForLanguages(
+#endif
           static_cast<CTFontRef>(font.GetNativeFont()), languages_cf));
 
   std::vector<Font> fallback_fonts;
