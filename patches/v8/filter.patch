diff --git a/BUILD.gn b/BUILD.gn
index dcefe37..3600734 100644
--- a/BUILD.gn
+++ b/BUILD.gn
@@ -45,7 +45,7 @@ declare_args() {

   # Enable ECMAScript Internationalization API. Enabling this feature will
   # add a dependency on the ICU library.
-  v8_enable_i18n_support = true
+  v8_enable_i18n_support = false

   # Enable slow dchecks.
   v8_enable_slow_dchecks = false
@@ -133,12 +133,13 @@ config("libsampler_config") {
 # This config should only be applied to code using V8 and not any V8 code
 # itself.
 config("external_config") {
-  if (is_component_build) {
+  # if (is_component_build) {
     defines = [
       "V8_SHARED",
       "USING_V8_SHARED",
     ]
-  }
+  # }
+
   include_dirs = [ "include" ]
   libs = []
   if (is_android && current_toolchain != host_toolchain) {
@@ -726,6 +727,7 @@ source_set("v8_maybe_snapshot") {
 }

 v8_source_set("v8_nosnapshot") {
+  set_sources_assignment_filter(["*"])
   visibility = [ ":*" ]  # Only targets in this file can depend on this.

   deps = [
@@ -748,6 +750,7 @@ v8_source_set("v8_nosnapshot") {
 }

 v8_source_set("v8_snapshot") {
+  set_sources_assignment_filter(["*"])
   # Only targets in this file and the top-level visibility target can
   # depend on this.
   visibility = [
@@ -781,6 +784,7 @@ v8_source_set("v8_snapshot") {

 if (v8_use_external_startup_data) {
   v8_source_set("v8_external_snapshot") {
+
     visibility = [ ":*" ]  # Only targets in this file can depend on this.

     deps = [
@@ -805,6 +809,8 @@ if (v8_use_external_startup_data) {
 }

 v8_source_set("v8_base") {
+  set_sources_assignment_filter(["*"])
+
   visibility = [ ":*" ]  # Only targets in this file can depend on this.

   sources = [
@@ -1986,8 +1992,8 @@ v8_source_set("v8_base") {
     ":v8_libsampler",
   ]

-  sources += [ v8_generated_peephole_source ]
-  deps += [ ":run_mkpeephole" ]
+  # sources += [ v8_generated_peephole_source ]
+  # deps += [ ":run_mkpeephole" ]

   if (is_win) {
     # TODO(jschuh): crbug.com/167187 fix size_t to int truncations.
@@ -2001,8 +2007,8 @@ v8_source_set("v8_base") {
     }
   } else {
     sources -= [
-      "src/i18n.cc",
-      "src/i18n.h",
+      # "src/i18n.cc",
+      # "src/i18n.h",
     ]
   }

@@ -2013,6 +2019,8 @@ v8_source_set("v8_base") {
 }

 v8_source_set("v8_libbase") {
+  set_sources_assignment_filter(["*"])
+
   visibility = [ ":*" ]  # Only targets in this file can depend on this.

   sources = [
@@ -2146,6 +2154,8 @@ v8_source_set("v8_libbase") {
 }

 v8_source_set("v8_libplatform") {
+  set_sources_assignment_filter(["*"])
+
   sources = [
     "//base/trace_event/common/trace_event_common.h",
     "include/libplatform/libplatform.h",
@@ -2175,6 +2185,8 @@ v8_source_set("v8_libplatform") {
 }

 v8_source_set("v8_libsampler") {
+  set_sources_assignment_filter(["*"])
+
   sources = [
     "src/libsampler/sampler.cc",
     "src/libsampler/sampler.h",
diff --git a/src/snapshot/mksnapshot.cc b/src/snapshot/mksnapshot.cc
index f4362e5..e11bab9 100644
--- a/src/snapshot/mksnapshot.cc
+++ b/src/snapshot/mksnapshot.cc
@@ -137,48 +137,48 @@ char* GetExtraCode(char* filename, const char* description) {

 int main(int argc, char** argv) {
   // Make mksnapshot runs predictable to create reproducible snapshots.
-  i::FLAG_predictable = true;
-
-  // Print the usage if an error occurs when parsing the command line
-  // flags or if the help flag is set.
-  int result = i::FlagList::SetFlagsFromCommandLine(&argc, argv, true);
-  if (result > 0 || (argc > 3) || i::FLAG_help) {
-    ::printf("Usage: %s --startup_src=... --startup_blob=... [extras]\n",
-             argv[0]);
-    i::FlagList::PrintHelp();
-    return !i::FLAG_help;
-  }
-
-  i::CpuFeatures::Probe(true);
-  V8::InitializeICUDefaultLocation(argv[0]);
-  v8::Platform* platform = v8::platform::CreateDefaultPlatform();
-  v8::V8::InitializePlatform(platform);
-  v8::V8::Initialize();
-
-  {
-    SnapshotWriter writer;
-    if (i::FLAG_startup_src) writer.SetSnapshotFile(i::FLAG_startup_src);
-    if (i::FLAG_startup_blob) writer.SetStartupBlobFile(i::FLAG_startup_blob);
-
-    char* embed_script = GetExtraCode(argc >= 2 ? argv[1] : NULL, "embedding");
-    StartupData blob = v8::V8::CreateSnapshotDataBlob(embed_script);
-    delete[] embed_script;
-
-    char* warmup_script = GetExtraCode(argc >= 3 ? argv[2] : NULL, "warm up");
-    if (warmup_script) {
-      StartupData cold = blob;
-      blob = v8::V8::WarmUpSnapshotDataBlob(cold, warmup_script);
-      delete[] cold.data;
-      delete[] warmup_script;
-    }
-
-    CHECK(blob.data);
-    writer.WriteSnapshot(blob);
-    delete[] blob.data;
-  }
-
-  V8::Dispose();
-  V8::ShutdownPlatform();
-  delete platform;
+  // i::FLAG_predictable = true;
+
+  // // Print the usage if an error occurs when parsing the command line
+  // // flags or if the help flag is set.
+  // int result = i::FlagList::SetFlagsFromCommandLine(&argc, argv, true);
+  // if (result > 0 || (argc > 3) || i::FLAG_help) {
+  //   ::printf("Usage: %s --startup_src=... --startup_blob=... [extras]\n",
+  //            argv[0]);
+  //   i::FlagList::PrintHelp();
+  //   return !i::FLAG_help;
+  // }
+
+  // i::CpuFeatures::Probe(true);
+  // V8::InitializeICUDefaultLocation(argv[0]);
+  // v8::Platform* platform = v8::platform::CreateDefaultPlatform();
+  // v8::V8::InitializePlatform(platform);
+  // v8::V8::Initialize();
+
+  // {
+  //   SnapshotWriter writer;
+  //   if (i::FLAG_startup_src) writer.SetSnapshotFile(i::FLAG_startup_src);
+  //   if (i::FLAG_startup_blob) writer.SetStartupBlobFile(i::FLAG_startup_blob);
+
+  //   char* embed_script = GetExtraCode(argc >= 2 ? argv[1] : NULL, "embedding");
+  //   StartupData blob = v8::V8::CreateSnapshotDataBlob(embed_script);
+  //   delete[] embed_script;
+
+  //   char* warmup_script = GetExtraCode(argc >= 3 ? argv[2] : NULL, "warm up");
+  //   if (warmup_script) {
+  //     StartupData cold = blob;
+  //     blob = v8::V8::WarmUpSnapshotDataBlob(cold, warmup_script);
+  //     delete[] cold.data;
+  //     delete[] warmup_script;
+  //   }
+
+  //   CHECK(blob.data);
+  //   writer.WriteSnapshot(blob);
+  //   delete[] blob.data;
+  // }
+
+  // V8::Dispose();
+  // V8::ShutdownPlatform();
+  // delete platform;
   return 0;
 }
